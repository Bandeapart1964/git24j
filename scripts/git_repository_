int git_repository_open(git_repository **out, const char *path);
int git_repository_open_from_worktree(git_repository **out, git_worktree *wt);
int git_repository_wrap_odb(git_repository **out, git_odb *odb);
int git_repository_discover(git_buf *out, const char *start_path, int across_fs, const char *ceiling_dirs);
int git_repository_open_ext(git_repository **out, const char *path, unsigned int flags, const char *ceiling_dirs);
int git_repository_open_bare(git_repository **out, const char *bare_path);
void git_repository_free(git_repository *repo);
int git_repository_init(git_repository **out, const char *path, unsigned int is_bare);
int git_repository_init_options_init(git_repository_init_options *opts, unsigned int version);
int git_repository_init_ext(git_repository **out, const char *repo_path, git_repository_init_options *opts);
int git_repository_head(git_reference **out, git_repository *repo);
int git_repository_head_for_worktree(git_reference **out, git_repository *repo, const char *name);
int git_repository_head_detached(git_repository *repo);
int git_repository_head_detached_for_worktree(git_repository *repo, const char *name);
int git_repository_head_unborn(git_repository *repo);
int git_repository_is_empty(git_repository *repo);
int git_repository_item_path(git_buf *out, const git_repository *repo, git_repository_item_t item);
const char * git_repository_path(const git_repository *repo);
const char * git_repository_workdir(const git_repository *repo);
const char * git_repository_commondir(const git_repository *repo);
int git_repository_set_workdir(git_repository *repo, const char *workdir, int update_gitlink);
int git_repository_is_bare(const git_repository *repo);
int git_repository_is_worktree(const git_repository *repo);
int git_repository_config(git_config **out, git_repository *repo);
int git_repository_config_snapshot(git_config **out, git_repository *repo);
int git_repository_odb(git_odb **out, git_repository *repo);
int git_repository_refdb(git_refdb **out, git_repository *repo);
int git_repository_index(git_index **out, git_repository *repo);
int git_repository_message(git_buf *out, git_repository *repo);
int git_repository_message_remove(git_repository *repo);
int git_repository_state_cleanup(git_repository *repo);
int git_repository_fetchhead_foreach(git_repository *repo, git_repository_fetchhead_foreach_cb callback, void *payload);
int git_repository_mergehead_foreach(git_repository *repo, git_repository_mergehead_foreach_cb callback, void *payload);
int git_repository_hashfile(git_oid *out, git_repository *repo, const char *path, git_object_t type, const char *as_path);
int git_repository_set_head(git_repository *repo, const char *refname);
int git_repository_set_head_detached(git_repository *repo, const git_oid *commitish);
int git_repository_set_head_detached_from_annotated(git_repository *repo, const git_annotated_commit *commitish);
int git_repository_detach_head(git_repository *repo);
int git_repository_state(git_repository *repo);
int git_repository_set_namespace(git_repository *repo, const char *nmspace);
const char * git_repository_get_namespace(git_repository *repo);
int git_repository_is_shallow(git_repository *repo);
int git_repository_ident(const char **name, const char **email, const git_repository *repo);
int git_repository_set_ident(git_repository *repo, const char *name, const char *email);
int git_repository_create_cb(git_repository **out, const char *path, int bare, void *payload);
int git_repository_fetchhead_foreach_cb(const char *ref_name, const char *remote_url, const git_oid *oid, unsigned int is_merge, void *payload);
int git_repository_mergehead_foreach_cb(const git_oid *oid, void *payload);

