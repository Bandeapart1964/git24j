int git_remote_add_fetch(git_repository *repo, const char *remote, const char *refspec);
int git_remote_add_push(git_repository *repo, const char *remote, const char *refspec);
git_remote_autotag_option_t git_remote_autotag(const git_remote *remote);
int git_remote_connect(git_remote *remote, git_direction direction, const git_remote_callbacks *callbacks, const git_proxy_options *proxy_opts, const git_strarray *custom_headers);
int git_remote_connected(const git_remote *remote);
int git_remote_create(git_remote **out, git_repository *repo, const char *name, const char *url);
int git_remote_create_anonymous(git_remote **out, git_repository *repo, const char *url);
int git_remote_create_detached(git_remote **out, const char *url);
int git_remote_create_init_options(git_remote_create_options *opts, unsigned int version);
int git_remote_create_with_fetchspec(git_remote **out, git_repository *repo, const char *name, const char *url, const char *fetch);
int git_remote_create_with_opts(git_remote **out, const char *url, const git_remote_create_options *opts);
int git_remote_default_branch(git_buf *out, git_remote *remote);
int git_remote_delete(git_repository *repo, const char *name);
void git_remote_disconnect(git_remote *remote);
int git_remote_download(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts);
int git_remote_dup(git_remote **dest, git_remote *source);
int git_remote_fetch(git_remote *remote, const git_strarray *refspecs, const git_fetch_options *opts, const char *reflog_message);
void git_remote_free(git_remote *remote);
int git_remote_get_fetch_refspecs(git_strarray *array, const git_remote *remote);
int git_remote_get_push_refspecs(git_strarray *array, const git_remote *remote);
const git_refspec * git_remote_get_refspec(const git_remote *remote, size_t n);
int git_remote_init_callbacks(git_remote_callbacks *opts, unsigned int version);
int git_remote_is_valid_name(const char *remote_name);
int git_remote_list(git_strarray *out, git_repository *repo);
int git_remote_lookup(git_remote **out, git_repository *repo, const char *name);
int git_remote_ls(const git_remote_head ***out, size_t *size, git_remote *remote);
const char * git_remote_name(const git_remote *remote);
git_repository * git_remote_owner(const git_remote *remote);
int git_remote_prune(git_remote *remote, const git_remote_callbacks *callbacks);
int git_remote_prune_refs(const git_remote *remote);
int git_remote_push(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts);
const char * git_remote_pushurl(const git_remote *remote);
size_t git_remote_refspec_count(const git_remote *remote);
int git_remote_rename(git_strarray *problems, git_repository *repo, const char *name, const char *new_name);
int git_remote_set_autotag(git_repository *repo, const char *remote, git_remote_autotag_option_t value);
int git_remote_set_pushurl(git_repository *repo, const char *remote, const char *url);
int git_remote_set_url(git_repository *repo, const char *remote, const char *url);
const git_transfer_progress * git_remote_stats(git_remote *remote);
void git_remote_stop(git_remote *remote);
int git_remote_update_tips(git_remote *remote, const git_remote_callbacks *callbacks, int update_fetchhead, git_remote_autotag_option_t download_tags, const char *reflog_message);
int git_remote_upload(git_remote *remote, const git_strarray *refspecs, const git_push_options *opts);
const char * git_remote_url(const git_remote *remote);
